Description: 'Abhimanyu Dwivedi for Project 2 - Udacity Nanodegree. This is Launch Configuration for Udagram that will a VPC with 4 subnets.'

#Parameters for Deployment 
Parameters:
  EnvironmentName:
    Description: This is a param that will be prefixed to resources
    Type: String
  VpcCIDR:
    Description: IP range (CIDR notation) for VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetOne:
    Description: Please enter the IP range (CIDR notation) for this
    Type: String
    Default: 10.0.1.0/24
  PublicSubnetTwo:
    Description: Please enter the IP range (CIDR notation) for this
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnetOne:
    Description: Please enter the IP range (CIDR notation) for this
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnetTwo:
    Description: Please enter the IP range (CIDR notation) for this
    Type: String
    Default: 10.0.4.0/24


Resources:

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      InstanceTenancy: dedicated
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnetOne
      MapPublicIpOnLaunch: false
      Tags: 
        -   Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnetTwo
      MapPublicIpOnLaunch: false
      Tags: 
        -   Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)}}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetOne
      MapPublicIpOnLaunch: false
      Tags: 
        -   Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetTwo
      MapPublicIpOnLaunch: false
      Tags: 
        -   Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ2)}
  
  
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ListS3BucketsRole
  ListS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListS3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: ListS3BucketsRole
  ListS3BucketsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP at port 80 and SSH from local only
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  ec2instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2instance
      ImageId: ami-003634241a8fcdec0
      InstanceType: t3.small
      SubnetId:
        Ref: PublicSubnetOne
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: WebServerSecurityGroup

  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip

        ImageId: ami-003634241a8fcdec0
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        SecurityGroups:
        - Ref: WebServerSecurityGroup
        InstanceType: t3.small
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-loadbalancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup


  WebServerTargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
      TargetType: instance
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-web-server-tg
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'myVPC'
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-igw
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
           -   Key: Name
               Value: !Sub ${EnvironmentName}-nat-gateway-1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags:
           -   Key: Name
               Value: !Sub ${EnvironmentName}-nat-gateway-2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'myVPC'
      Tags:
         -   Key: Name
             Value: !Sub ${EnvironmentName}-public-route-table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'myVPC'
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-private-route-table-AZ1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      NatGatewayId: !Ref 'NatGateway1'
      DestinationCidrBlock: '0.0.0.0/0'
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'myVPC'
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-private-route-table-AZ2
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      NatGatewayId: !Ref 'NatGateway2'
      DestinationCidrBlock: '0.0.0.0/0'
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
Outputs: 
  LoadbalancerURL:
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Description: Application URL
  ec2instanceIP:
    Description: ec2instance Public IP
    Value: !GetAtt ec2instance.PublicIp